{
    "collab_server" : "",
    "contents" : "require(ggplot2)\nrequire(ggiraph)\nrequire(moonBook)\n\n\n#'Paste character vactoers with separatoe colon\n#'\n#'@param ... Arguments passed on to paste()\npastecolon=function(...){\n    paste(...,sep=\":\")\n}\n\n#'Make an interactive catepillar plot\n#'\n#'@param df A data.frame\n#'@param A A character string of \"numeric\" column name be used as a y-axis variable\n#'@param B A character string of column name be used as a grouping variable. Default value os NULL\n#'@param C A character string of column name be used as a x-axis variable\n#'@param interactive A logical value. If TRUE, an interactive plot will be returned\n#'@param digits An integer indicating the number of decimal places\n#'\n#'@return Ain interactive catepillar plot\nggCatepillarPlot=function(df,A,B=NULL,C,interactive=FALSE,digits=1){\n    if(is.null(B)){\n        dat=summarySE(df,A,C)\n    } else if(B==\"None\") {\n        dat=summarySE(df,A,C)\n    } else {\n        dat=summarySE(df,A,c(B,C))\n        dat[[B]]=factor(dat[[B]])\n    }\n    if(length(C)>1){\n        temp=Reduce(paste0,C)\n        dat[[temp]]=Reduce(pastecolon,dat[C])\n        C=temp\n        dat[[C]]=factor(dat[[C]])\n    }\n    #dat\n    dat$tooltip=dat[[B]]\n    dat$label=paste0(dat[[B]],\"<br>\",dat[[C]],\"<br>\",round(dat[[A]],digits))\n    dat$id=1:nrow(dat)\n\n    #print(dat)\n\n    if(class(dat[[C]])%in% c(\"numeric\",\"integer\")) {\n        mywidth=max(dat[[C]])/80\n    } else mywidth=0.2\n    #mywidth\n    if(is.null(B)) {\n        p<-ggplot(data=dat,aes_string(x=C,y=A,group=1,colour=C))+xlab(Reduce(pastecolon,C))\n\n    } else if(B==\"None\") {\n        p<-ggplot(data=dat,aes_string(x=C,y=A,group=1,colour=C))+xlab(Reduce(pastecolon,C))\n\n    } else p<-ggplot(data=dat,aes_string(x=C,y=A,group=B,colour=B))\n\n    p<-p+ geom_path_interactive(aes(tooltip=tooltip,data_id=id),position=position_dodge(width=mywidth))+\n        geom_point_interactive(aes(tooltip=label,data_id=id),size=4,position=position_dodge(width=mywidth))\n    p\n    p<-p+eval(parse(text=paste0(\"geom_errorbar(aes(ymin=\",A,\"-se,ymax=\",\n                                A,\"+se),width=\",mywidth,\",\n                                position=position_dodge(width=mywidth))\")))\n    #p<-my_theme(p)\n    #p<-p+theme(legend.position=\"none\")\n    if(interactive) p<-ggiraph(code=print(p),\n                               hover_css=\"r:7px;cursor:pointer;stroke-width:6px;\")\n    p\n}\n\n#'ggEffect generic\n#'\n#'Visualize the effect of interaction between two continuous independent variables on a response variable\n#'\n#'@param z Object to ggEffect\n#'@param ... additional arguments passed to the generic function\nggEffect <- function(z,...) UseMethod(\"ggEffect\")\n\n\n#'@describeIn ggEffect Visualize the effect of interaction between two continuous independent variables on a response variable\n#'\n#'@param y A name of response variable\n#'@param x1 A name of one of the independent variable\n#'@param x2 A name of the other independent variable\n#'@param x An integer(1 or 2) indicating which independent variable is used as x-axis variable\n#'@param probs A vector of probability weights for obtaining the elements of the vector being sampled.Default value is c(0.10,0.5,0.90)\n#'@param point A logical value. If TRUE, draw points\n#'@param xvalue A numeric vector\n#'@param digits An integer indicating the number of decimal places\n#'@param use.rownames If TRUE, use rownames in label\n#'@param interactive A logical value. If TRUE, an interactive plot will be returned\n#'\n#'@return An interactive plot showing interaction\nggEffect.default <-function(z,y,x1,x2,\n                          x=1,\n                          probs=c(0.10,0.5,0.90),\n                          point=TRUE,\n                          xvalue=NULL,\n                          digits=1,\n                          use.rownames=FALSE,\n                          interactive=FALSE) {\n\n    y=as.character(substitute(y))\n    x1=as.character(substitute(x1))\n    x2=as.character(substitute(x2))\n    formula=as.formula(paste(y,\"~\",x1,\"*\",x2))\n    ggEffect.formula(formula,z,x=x,probs=probs,point=point,xvalue=xvalue,\n                     digits=digits,use.rownames=use.rownames,interactive=interactive)\n}\n\n\n#'@describeIn ggEffect Visualize the effect of interaction between two continuous independent variables on a response variable\n#'\n#'@param form A formula\n#'@param data A data\n#'@examples\n#'#data(mtcars)\n#'#fit=lm(mpg~wt*hp,data=mtcars)\n#'#ggEffect(fit,use.rownames=TRUE)\n#'#ggEffect(fit,x=2)\n#'#require(moonBook)\n#'#fit2=lm(NTAV~age*smoking,data=radial)\n#'#ggEffect(fit2)\n#'#fit3=lm(age~sex*smoking,data=acs)\n#'#ggEffect(fit3,interactive=TRUE)\nggEffect.formula <-function(form,data,\n                          x=1,\n                          probs=c(0.10,0.5,0.90),\n                          point=TRUE,\n                          xvalue=NULL,\n                          digits=1,\n                          use.rownames=FALSE,\n                          interactive=FALSE){\n\n    # print(df)\n\n    df=data\n    fit=lm(form,data=data)\n    if(length(names(fit$model))!=3) {\n        print(\"two independent variables are allowed\")\n        return\n    }\n    ggEffect.lm(fit,x=x,probs=probs,point=point,xvalue=xvalue,\n                digits=digits,use.rownames=use.rownames,interactive=interactive)\n\n}\n\n#'Visualize the effect of interaction between two continuous independent variables on a response variable\n#'\n#'@param fit an object of class \"lm\"\n#'@param x An integer(1 or 2) indicating which independent variable is used as x-axis variable\n#'@param probs A vector of probability weights for obtaining the elements of the vector being sampled.Default value is c(0.10,0.5,0.90)\n#'@param point A logical value. If TRUE, draw points\n#'@param xvalue A numeric vector\n#'@param digits An integer indicating the number of decimal places\n#'@param use.rownames If TRUE, use rownames in label\n#'@param interactive A logical value. If TRUE, an interactive plot will be returned\n#'\n#'@return An interactive plot showing interaction\n#'@examples\n#'data(mtcars)\n#'fit=lm(mpg~wt*hp,data=mtcars)\n#'#ggEffect(fit,use.rownames=TRUE)\n#'#ggEffect(fit,use.rownames=TRUE,interactive=TRUE)\n#'#ggEffect(fit,x=2)\n#'#require(moonBook)\n#'#fit2=lm(NTAV~age*smoking,data=radial)\n#'#ggEffect(fit2,interactive=TRUE)\n#'#fit3=lm(age~sex*smoking,data=acs)\n#'#ggEffect(fit3,interactive=TRUE)\nggEffect.lm<-function(fit,\n                  x=1,\n                  probs=c(0.10,0.5,0.90),\n                  point=TRUE,\n                  xvalue=NULL,\n                  digits=1,\n                  use.rownames=FALSE,\n                  interactive=FALSE)\n    {\n\n    df=fit$model\n    coef=fit$coef\n    name=colnames(df)\n    count=0\n    if(is.numeric(df[[2]])) count=count+1\n    if(is.numeric(df[[3]])) count=count+2\n    if(count==0){\n        p<-ggCatepillarPlot(df,name[1],name[1+x],name[4-x])\n    } else if(count<3){\n        if(use.rownames) {\n            df$label=rownames(df)\n        } else df$label=paste0(name[1+x],\"=\",round(df[[name[1+x]]],digits),\"<br>\",\n                             name[1],\"=\",round(df[[name[1]]],digits))\n        df$data_id=1:nrow(df)\n        # str(df)\n        # coef\n        # summary(fit)\n        xvar=name[1+count]\n        color=name[4-count]\n        names=levels(df[[color]])\n        # df[[xvar]]\n        xmin=min(df[[xvar]])\n        xmin=rep(xmin,length(names))\n        xmax=max(df[[xvar]])\n        xmax=rep(xmax,length(names))\n        length(names)\n        intercept=coef[1]\n        slope=coef[2]\n        for(i in 2:length(names)){\n            slope=c(slope,coef[2]+coef[2+length(names)+(i-2)])\n            intercept=c(intercept,coef[1]+coef[3+(i-2)])\n        }\n        ymin=slope*xmin+intercept\n        ymax=slope*xmax+intercept\n        df1=data.frame(names,slope,intercept,xmin,ymin,xmax,ymax)\n        # df1\n        name2=rep(df1$names,2)\n        x2=c(df1$xmin,df1$xmax)\n        y2=c(df1$ymin,df1$ymax)\n        slope2=rep(df1$slope,2)\n        intercept2=rep(df1$intercept,2)\n        df2=data.frame(name2,x2,y2,slope2,intercept2)\n        colnames(df2)=c(color,\"x\",\"y\",\"slope\",\"intercept\")\n        df2$tooltip=paste0(color,\"=\",df2[[color]],\"<br>y=\",round(df2$slope,digits),\"*x +\",round(df2$intercept,digits))\n        df2$data_id=1:nrow(df2)\n        # df2\n        p<-ggplot(data=df,aes_string(x=name[1+count],y=name[1],colour=color))+\n            #stat_smooth(method=\"lm\",se=se,fullrange=TRUE)+\n            geom_path_interactive(data=df2,\n                                  aes_string(x=\"x\",y=\"y\",tooltip=\"tooltip\",data_id=\"data_id\"))\n        if(point) p<-p+ geom_point_interactive(aes(tooltip=label,data_id=data_id))\n\n        # p1<-ggplot(data=df,aes_string(x=name[1+count],y=name[1],colour=color))+\n        #     stat_smooth(method=\"lm\",se=se,fullrange=TRUE)+\n        #   #  geom_path_interactive(data=df2,\n        #    #                       aes_string(x=\"x\",y=\"y\",tooltip=\"tooltip\",data_id=\"data_id\"))+\n        #     geom_point_interactive(aes(tooltip=label,data_id=data_id))\n        # p1\n    } else {\n        (z=name[4-x])\n        if(use.rownames) df$label=rownames(df)\n        else df$label=paste0(name[1+x],\"=\",df[[name[1+x]]],\"<br>\",name[1],\"=\",df[[name[1]]])\n        df$data_id=1:nrow(df)\n        # print(df)\n        if(is.null(xvalue)) {\n            A=quantile(df[[4-x]],probs,na.rm=TRUE)\n        } else A=xvalue\n        count=length(A)\n        labels=as.character(A)\n        intercept=coef[1]+coef[4-x]*A\n        slope=coef[1+x]+coef[4]*A\n        xvar=df[[name[1+x]]]\n        xmin=rep(min(xvar),count)\n        xmax=rep(max(xvar),count)\n        ymin=xmin*slope+intercept\n        ymax=xmax*slope+intercept\n        df1=data.frame(A,intercept,slope,xmin,xmax,ymin,ymax)\n        # print(df1)\n        name2=rep(df1$A,2)\n        x2=c(df1$xmin,df1$xmax)\n        y2=c(df1$ymin,df1$ymax)\n        slope2=rep(df1$slope,2)\n        intercept2=rep(df1$intercept,2)\n        df2=data.frame(name2,x2,y2,slope2,intercept2)\n        colnames(df2)=c(z,\"x\",\"y\",\"slope\",\"intercept\")\n        df2[[z]]=factor(df2[[z]])\n        df2$tooltip=paste0(z,\"=\",df2[[z]],\"<br>y=\",round(df2$slope,1),\"*x +\",round(df2$intercept,1))\n        df2$data_id=1:nrow(df2)\n        # print(df2)\n        # str(df)\n        # str(df2)\n        # name\n        #df\n        #str(df)\n        p<-ggplot(data=df,aes_string(x=name[1+x],y=name[1],tooltip=\"label\",\n                                     data_id=\"data_id\"))+\n            geom_path_interactive(data=df2,\n                                  aes_string(x=\"x\",y=\"y\",tooltip=\"tooltip\",data_id=\"data_id\",color=z))\n\n        if(point) p<-p + geom_point_interactive()\n\n    }\n        if(interactive) p<-ggiraph(code=print(p),\n                                   hover_css=\"r:6px;fill:orange;cursor:pointer;stroke-width:4px;\")\n    p\n}\n\n#'Make an interactive plot for an ANCOVA model\n#'\n#'@param x an object\n#'@param ... additional arguments passed to the generic function\nggAncova=function(x,...) UseMethod(\"ggAncova\")\n\n#'Make an interactive plot for an ANCOVA model\n#'\n#'@param data a data.frame\n#'@param y A character string of \"continuous\" column name be assigned to a response variable.\n#'@param x A character string of \"continuous\" column name be assigned to a covariate.\n#'@param A A character string of column name be assigned to a grouping variable.\n#'@param label A character string of column name be assigned to the label\n#'@param digits integer indicating the number of decimal places\n#'@param interactive A logical value. If TRUE, an interactive plot will be returned\nggAncova.default=function(data,y,x,A,label=NULL,digits=1,interactive=FALSE){\n    y=as.character(substitute(y))\n    x=as.character(substitute(x))\n    A=as.character(substitute(A))\n    formula=as.formula(paste(y,\"~\",x,\"+\",A))\n    ggAncova.formula(formula,data,label=label,digits=digits,interactive=interactive)\n}\n\n\n#'Make an interactive plot for an ANCOVA model\n#'\n#'@param formula A formula\n#'@param data a data.frame\n#'@param label A character string of column name be assigned to the label\n#'@param digits integer indicating the number of decimal places\n#'@param interactive A logical value. If TRUE, an interactive plot will be returned\nggAncova.formula=function(formula,data,label=NULL,digits=1,interactive=FALSE){\n\n    # print(df)\n\n    df=data\n    fit=lm(formula,data=df)\n    #summary(fit)\n    if(length(names(fit$model))!=3) {\n        print(\"only one independent variable and one covariate are allowed\")\n        return\n    }\n    (y=names(fit$model)[1])\n    (x=names(fit$model)[2])\n    (A=names(fit$model)[3])\n    if((!is.numeric(df[[x]])) &(is.numeric(df[[A]]))){\n        temp=A\n        A=x\n        x=temp\n    } else if((is.numeric(df[[x]])) &(is.numeric(df[[A]]))){\n        df[[A]]=factor(df[[A]])\n        return(ggAncova.formula(formula,df,label=label,digits=digits,interactive=interactive))\n    } else if((!is.numeric(df[[x]])) &(!is.numeric(df[[A]]))){\n        print(\"only one independent variable and one covariate are allowed\")\n        return\n    }\n    ggAncova.lm(fit,label=NULL,digits=1,interactive=FALSE)\n\n}\n\n\n#'Make an interactive plot for an ANCOVA model\n#'\n#'@param fit An object of class \"lm\"\n#'@param label A character string of column name be assigned to the label\n#'@param digits integer indicating the number of decimal places\n#'@param interactive A logical value. If TRUE, an interactive plot will be returned\nggAncova.lm=function(fit,label=NULL,digits=1,interactive=FALSE){\n\n    # print(df)\n\n    df=fit$model\n    #summary(fit)\n    if(length(names(fit$model))!=3) {\n        print(\"only one independent variable and one covariate are allowed\")\n        return\n    }\n    (y=names(fit$model)[1])\n    (x=names(fit$model)[2])\n    (A=names(fit$model)[3])\n    if((!is.numeric(df[[x]])) &(is.numeric(df[[A]]))){\n        temp=A\n        A=x\n        x=temp\n    } else if((is.numeric(df[[x]])) &(is.numeric(df[[A]]))){\n        df[[A]]=factor(df[[A]])\n        formula=as.formula(paste(y,\"~\",x,\"+\",A))\n        fit=lm(formula,df)\n        return(ggAncova.lm(fit,label=label,digits=digits,interactive=interactive))\n    } else if((!is.numeric(df[[x]])) &(!is.numeric(df[[A]]))){\n        print(\"only one independent variable and one covariate are allowed\")\n        return\n    }\n    df$all=rep(\"all\",nrow(df))\n    df$colour=factor(df[[A]])\n    if(is.null(label)) {\n        df$label=paste0(df[[A]],\"<br>\",x,\"=\",round(df[[x]],1),\"<br>\",y,\"=\",round(df[[y]],digits))\n    } else df$label=df[[label]]\n    df$data_id=1:nrow(df)\n    coef=fit$coef\n    slope=rep(coef[2],length(coef)-1)\n    intercept=coef[1]\n    for(i in 3:length(coef)) intercept=c(intercept,coef[1]+coef[i])\n    name=levels(df[[A]])\n    xmin=min(df[[x]])\n    xmin=rep(xmin,length(coef)-1)\n    xmax=max(df[[x]])\n    xmax=rep(xmax,length(coef)-1)\n    ymin=xmin*slope+intercept\n    ymax=xmax*slope+intercept\n    df1=data.frame(name,slope,intercept,xmin,ymin,xmax,ymax)\n    colnames(df1)[1]=A\n    df1$colour=df1[[A]]\n    # print(df1)\n    name2=rep(name,2)\n    x2=c(df1$xmin,df1$xmax)\n    y2=c(df1$ymin,df1$ymax)\n    slope2=rep(df1$slope,2)\n    intercept2=rep(df1$intercept,2)\n    df2=data.frame(name2,x2,y2,slope2,intercept2)\n    colnames(df2)=c(A,x,y,\"slope\",\"intercept\")\n    df2$color=df2[[A]]\n    df2$tooltip=paste0(A,\"=\",df2[[A]],\"<br>y=\",round(df2$slope,1),\"*x +\",round(df2$intercept,1))\n    df2$data_id=1:nrow(df2)\n    # print(df2)\n\n    p<-ggplot(data=df,aes_string(x=x,y=y,colour=\"colour\",fill=A,tooltip=\"label\",data_id=\"data_id\"))+\n        geom_point_interactive()+\n        facet_grid(as.formula(paste(\".~\",A)),margins=TRUE)+\n        guides(colour=FALSE,fill=FALSE,linetype=FALSE)+\n        #geom_abline(data=df1,aes_string(slope=\"slope\",intercept=\"intercept\",\n        #                                colour=\"colour\",linetype=\"colour\"))\n        geom_path_interactive(data=df2,aes(color=color,tooltip=tooltip,data_id=data_id,linetype=color))\n    if(interactive) p<-ggiraph(code=print(p),\n                               hover_css=\"r:4px;cursor:pointer;stroke-width:6px;\")\n    p\n\n}\n\n#\n#\n# ggAncova(mtcars,\"mpg\",\"wt\",\"cyl\")\n# ggAncova(mtcars,mpg,wt,cyl)\n# ggAncova(mpg~wt+cyl,data=mtcars)\n# mtcars$cyl1=factor(mtcars$cyl)\n# fit=lm(mpg~wt+cyl,data=mtcars)\n# ggAncova(fit)\n# require(moonBook)\n# ggAncova(radial,NTAV,age,smoking,interactive=TRUE)\n# fit=lm(NTAV~age+DM,data=radial)\n# ggAncova(fit,interactive=TRUE)\n",
    "created" : 1465053387698.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3172887593",
    "id" : "CBF074FD",
    "lastKnownWriteTime" : 1465058153,
    "last_content_update" : 1465058153204,
    "path" : "~/ownCloud/Documents/moonBook2/R/ggAncova.R",
    "project_path" : "R/ggAncova.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}