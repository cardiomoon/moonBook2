if(interactive) p<-ggiraph(code=print(p),
hover_css="r:7px;cursor:pointer;stroke-width:6px;")
p
}
ggEffect(fit3,interactive=TRUE)
source('~/ownCloud/Documents/webr/R/summarySE.R', echo=TRUE)
ggEffect(fit3,interactive=TRUE)
ggEffect.default=function(data,y,x1,x2,
x=1,
probs=c(0.10,0.5,0.90),
point=TRUE,
xvalue=NULL,
digits=1,
use.rownames=FALSE,
interactive=FALSE) {
y=as.character(substitute(y))
x1=as.character(substitute(x1))
x2=as.character(substitute(x2))
formula=as.formula(paste(y,"~",x1,"*",x2)
ggEffect.formula(formula,data,x=x,probs=probs,point=point,xvalue=xvalue,
digits=digits,use.rownames=use.rownames,interactive=interactive)
}
ggEffect.default=function(data,y,x1,x2,
x=1,
probs=c(0.10,0.5,0.90),
point=TRUE,
xvalue=NULL,
digits=1,
use.rownames=FALSE,
interactive=FALSE) {
y=as.character(substitute(y))
x1=as.character(substitute(x1))
x2=as.character(substitute(x2))
formula=as.formula(paste(y,"~",x1,"*",x2))
ggEffect.formula(formula,data,x=x,probs=probs,point=point,xvalue=xvalue,
digits=digits,use.rownames=use.rownames,interactive=interactive)
}
ggEffect(mtcars,mog,wt,hp)
ggEffect(mtcars,mpg,wt,hp)
ggEffect(mtcars,"mpg","wt","hp")
ggEffect=function(z,...) UseMethod("ggEffect")
#'Visualize the effect of interaction between two continuous independent variables on a response variable
#'
#'@param data A data
#'@param y A name of response variable
#'@param x1 A name of one of the independent variable
#'@param x2 A name of the other independent variable
#'@param x An integer(1 or 2) indicating which independent variable is used as x-axis variable
#'@param probs A vector of probability weights for obtaining the elements of the vector being sampled.Default value is c(0.10,0.5,0.90)
#'@param point A logical value. If TRUE, draw points
#'@param xvalue
#'@param digits An integer indicating the number of decimal places
#'@param use.rownames If TRUE, use rownames in label
#'@param interactive A logical value. If TRUE, an interactive plot will be returned
#'
#'@return An interactive plot showing interaction
#'@examples
#'ggEffect(mtcars,mpg,wt,hp)
#'ggEffect(mtcars,"mpg","wt","hp")
ggEffect.default=function(data,y,x1,x2,
x=1,
probs=c(0.10,0.5,0.90),
point=TRUE,
xvalue=NULL,
digits=1,
use.rownames=FALSE,
interactive=FALSE) {
y=as.character(substitute(y))
x1=as.character(substitute(x1))
x2=as.character(substitute(x2))
formula=as.formula(paste(y,"~",x1,"*",x2))
ggEffect.formula(formula,data,x=x,probs=probs,point=point,xvalue=xvalue,
digits=digits,use.rownames=use.rownames,interactive=interactive)
}
#'Visualize the effect of interaction between two continuous independent variables on a response variable
#'
#'@param formula A formula
#'@param data A data
#'@param x An integer(1 or 2) indicating which independent variable is used as x-axis variable
#'@param probs A vector of probability weights for obtaining the elements of the vector being sampled.Default value is c(0.10,0.5,0.90)
#'@param point A logical value. If TRUE, draw points
#'@param xvalue
#'@param digits An integer indicating the number of decimal places
#'@param use.rownames If TRUE, use rownames in label
#'@param interactive A logical value. If TRUE, an interactive plot will be returned
#'
#'@return An interactive plot showing interaction
#'@examples
#'data(mtcars)
#'ggEffect(mpg~wt*hp,data=mtcars,use.rownames=TRUE)
#'ggEffect(mpg~wt*hp,data=mtcars,use.rownames=TRUE,x=2)
#'fit=lm(mpg~wt*hp,data=mtcars)
#'ggEffect(fit,use.rownames=TRUE,interactive=TRUE)
#'ggEffect(fit,x=2)
#'require(moonBook)
#'fit2=lm(NTAV~age*smoking,data=radial)
#'ggEffect(fit2)
#'fit3=lm(age~sex*smoking,data=acs)
#'ggEffect(fit3,interactive=TRUE)
ggEffect.formula=function(formula,data,
x=1,
probs=c(0.10,0.5,0.90),
point=TRUE,
xvalue=NULL,
digits=1,
use.rownames=FALSE,
interactive=FALSE){
# print(df)
df=data
fit=lm(formula,data=data)
if(length(names(fit$model))!=3) {
print("two independent variables are allowed")
return
}
ggEffect.lm(fit,x=x,probs=probs,point=point,xvalue=xvalue,
digits=digits,use.rownames=use.rownames,interactive=interactive)
}
#'Visualize the effect of interaction between two continuous independent variables on a response variable
#'
#'@param fit an object of class "lm"
#'@param x An integer(1 or 2) indicating which independent variable is used as x-axis variable
#'@param probs A vector of probability weights for obtaining the elements of the vector being sampled.Default value is c(0.10,0.5,0.90)
#'@param point A logical value. If TRUE, draw points
#'@param xvalue
#'@param digits An integer indicating the number of decimal places
#'@param use.rownames If TRUE, use rownames in label
#'@param interactive A logical value. If TRUE, an interactive plot will be returned
#'
#'@return An interactive plot showing interaction
#'@examples
#'data(mtcars)
#'fit=lm(mpg~wt*hp,data=mtcars)
#'ggEffect(fit,use.rownames=TRUE)
#'ggEffect(fit,use.rownames=TRUE,interactive=TRUE)
#'ggEffect(fit,x=2)
#'require(moonBook)
#'fit2=lm(NTAV~age*smoking,data=radial)
#'ggEffect(fit2,interactive=TRUE)
#'fit3=lm(age~sex*smoking,data=acs)
#'ggEffect(fit3,interactive=TRUE)
ggEffect.lm=function(fit,
x=1,
probs=c(0.10,0.5,0.90),
point=TRUE,
xvalue=NULL,
digits=1,
use.rownames=FALSE,
interactive=FALSE)
{
df=fit$model
coef=fit$coef
name=colnames(df)
count=0
if(is.numeric(df[[2]])) count=count+1
if(is.numeric(df[[3]])) count=count+2
if(count==0){
p<-ggCatepillarPlot(df,name[1],name[1+x],name[4-x])
} else if(count<3){
if(use.rownames) {
df$label=rownames(df)
} else df$label=paste0(name[1+x],"=",round(df[[name[1+x]]],digits),"<br>",
name[1],"=",round(df[[name[1]]],digits))
df$data_id=1:nrow(df)
# str(df)
# coef
# summary(fit)
xvar=name[1+count]
color=name[4-count]
names=levels(df[[color]])
# df[[xvar]]
xmin=min(df[[xvar]])
xmin=rep(xmin,length(names))
xmax=max(df[[xvar]])
xmax=rep(xmax,length(names))
length(names)
intercept=coef[1]
slope=coef[2]
for(i in 2:length(names)){
slope=c(slope,coef[2]+coef[2+length(names)+(i-2)])
intercept=c(intercept,coef[1]+coef[3+(i-2)])
}
ymin=slope*xmin+intercept
ymax=slope*xmax+intercept
df1=data.frame(names,slope,intercept,xmin,ymin,xmax,ymax)
# df1
name2=rep(df1$names,2)
x2=c(df1$xmin,df1$xmax)
y2=c(df1$ymin,df1$ymax)
slope2=rep(df1$slope,2)
intercept2=rep(df1$intercept,2)
df2=data.frame(name2,x2,y2,slope2,intercept2)
colnames(df2)=c(color,"x","y","slope","intercept")
df2$tooltip=paste0(color,"=",df2[[color]],"<br>y=",round(df2$slope,digits),"*x +",round(df2$intercept,digits))
df2$data_id=1:nrow(df2)
# df2
p<-ggplot(data=df,aes_string(x=name[1+count],y=name[1],colour=color))+
#stat_smooth(method="lm",se=se,fullrange=TRUE)+
geom_path_interactive(data=df2,
aes_string(x="x",y="y",tooltip="tooltip",data_id="data_id"))
if(point) p<-p+ geom_point_interactive(aes(tooltip=label,data_id=data_id))
# p1<-ggplot(data=df,aes_string(x=name[1+count],y=name[1],colour=color))+
#     stat_smooth(method="lm",se=se,fullrange=TRUE)+
#   #  geom_path_interactive(data=df2,
#    #                       aes_string(x="x",y="y",tooltip="tooltip",data_id="data_id"))+
#     geom_point_interactive(aes(tooltip=label,data_id=data_id))
# p1
} else {
(z=name[4-x])
if(use.rownames) df$label=rownames(df)
else df$label=paste0(name[1+x],"=",df[[name[1+x]]],"<br>",name[1],"=",df[[name[1]]])
df$data_id=1:nrow(df)
# print(df)
if(is.null(xvalue)) {
A=quantile(df[[4-x]],probs,na.rm=TRUE)
} else A=xvalue
count=length(A)
labels=as.character(A)
intercept=coef[1]+coef[4-x]*A
slope=coef[1+x]+coef[4]*A
xvar=df[[name[1+x]]]
xmin=rep(min(xvar),count)
xmax=rep(max(xvar),count)
ymin=xmin*slope+intercept
ymax=xmax*slope+intercept
df1=data.frame(A,intercept,slope,xmin,xmax,ymin,ymax)
# print(df1)
name2=rep(df1$A,2)
x2=c(df1$xmin,df1$xmax)
y2=c(df1$ymin,df1$ymax)
slope2=rep(df1$slope,2)
intercept2=rep(df1$intercept,2)
df2=data.frame(name2,x2,y2,slope2,intercept2)
colnames(df2)=c(z,"x","y","slope","intercept")
df2[[z]]=factor(df2[[z]])
df2$tooltip=paste0(z,"=",df2[[z]],"<br>y=",round(df2$slope,1),"*x +",round(df2$intercept,1))
df2$data_id=1:nrow(df2)
# print(df2)
# str(df)
# str(df2)
# name
#df
#str(df)
p<-ggplot(data=df,aes_string(x=name[1+x],y=name[1],tooltip="label",
data_id="data_id"))+
geom_path_interactive(data=df2,
aes_string(x="x",y="y",tooltip="tooltip",data_id="data_id",color=z))
if(point) p<-p + geom_point_interactive()
}
if(interactive) p<-ggiraph(code=print(p),
hover_css="r:6px;fill:orange;cursor:pointer;stroke-width:4px;")
p
}
ggEffect(mtcars,mpg,wt,hp)
xvars=c(age,sex)
source('~/ownCloud/Documents/webr/R/ggRadar.R', echo=TRUE)
#'ggRadar(data=acs,groupvar=sex,interactive=TRUE)
#'require(moonBook)
#'ggRadar(data=acs,groupvar=sex)
#'ggRadar(data=acs,groupvar="sex")
ggRadar(data=acs,groupvar="sex")
#'ggRadar(data=acs,groupvar="sex")
source('~/ownCloud/Documents/webr/R/ggRadar.R', echo=TRUE)
#'require(moonBook)
#'ggRadar(data=acs,xvars=c("TC","TG","HDLC","LDLC"),groupvar="smoking")
source('~/ownCloud/Documents/webr/R/ggRadar.R', echo=TRUE)
#'ggRadar(data=acs,groupvar="sex")
ggRadar(data=acs,groupvar="sex")
#'ggRadar(data=acs,groupvar="sex")
ggRadar(data=acs,groupvar="sex")
ggRadar(data=acs,groupvar="sex",interactive=TRUE)
ggRadar=function(data=iris,
xvars=NULL,
yvar=NULL,
groupvar=NULL,
rescale=FALSE,
legend.position="bottom",
radar=TRUE,polar=FALSE,
mean=TRUE,nrow=FALSE,
colour="red", ylim=NULL,
interactive=FALSE){
groupvar=as.character(substitute(groupvar))
if(is.null(xvars)) {
select=sapply(data,is.numeric)
xvars=colnames(data)[select]
}
if(is.null(yvar)){
# if(!is.null(groupvar)) {
#         for(i in 1:length(groupvar)) data[[groupvar[i]]]=factor(data[[groupvar[i]]])
# }
# data
if(rescale) data=rescale_df(data,groupvar)
longdf=melt(data,id.vars=groupvar,measure.vars=xvars)
longdf
if(mean)
df=ddply(longdf,c(groupvar,"variable"),summarize,mean(value,na.rm=TRUE))
if(nrow)
df=ddply(longdf,c(groupvar,"variable"),"nrow")
colnames(df)[length(df)]="value"
#print(df)
} else{
longdf=data
}
if(is.null(groupvar)){
df$id=1:nrow(df)
df$tooltip=paste0(df$variable,"=",round(df$value,1))
p<-ggplot(data=df,aes_string(x="variable",y="value",group=1,tooltip="tooltip",data_id="id"))+
geom_point_interactive(size=3,colour=colour)+
geom_polygon(colour=colour,fill=colour,alpha=0.4)
} else {
df=df[!(df$variable %in% groupvar),]
df$id2=df[[groupvar]]
df$id=1:nrow(df)
df$tooltip=paste0(groupvar,"=",df[[groupvar]],"<br>",df$variable,"=",round(df$value,1))
df$tooltip2=paste0(groupvar,"=",df[[groupvar]])
df
for(i in 1:length(groupvar)) df[[groupvar[i]]]=factor(df[[groupvar[i]]])
p<-ggplot(data=df,aes_string(x="variable",y="value",tooltip="tooltip",data_id="id",
colour=groupvar,fill=groupvar,group=groupvar))+
geom_polygon_interactive(aes(tooltip=tooltip2,data_id=id2),alpha=0.4)+
geom_point_interactive(size=3)
}
p<- p+ xlab("")+ylab("")+theme(legend.position=legend.position)
if(radar==TRUE) p<-p+coord_radar()
if(polar==TRUE) p<-p+coord_polar()
if(!is.null(ylim)) p<-p+expand_limits(y=ylim)
if(interactive) p<-ggiraph(code=print(p),hover_css="fill:orange;r:6px;cursor:pointer")
p
}
ggRadar(data=acs,groupvar="sex")
ggRadar(data=acs,groupvar=sex)
ggRadar=function(data=iris,
xvars=NULL,
yvar=NULL,
groupvar=NULL,
rescale=FALSE,
legend.position="bottom",
radar=TRUE,polar=FALSE,
mean=TRUE,nrow=FALSE,
colour="red", ylim=NULL,
interactive=FALSE){
if(is.null(xvars)) {
select=sapply(data,is.numeric)
xvars=colnames(data)[select]
}
if(is.null(yvar)){
# if(!is.null(groupvar)) {
#         for(i in 1:length(groupvar)) data[[groupvar[i]]]=factor(data[[groupvar[i]]])
# }
# data
if(rescale) data=rescale_df(data,groupvar)
longdf=melt(data,id.vars=groupvar,measure.vars=xvars)
longdf
if(mean)
df=ddply(longdf,c(groupvar,"variable"),summarize,mean(value,na.rm=TRUE))
if(nrow)
df=ddply(longdf,c(groupvar,"variable"),"nrow")
colnames(df)[length(df)]="value"
#print(df)
} else{
longdf=data
}
if(is.null(groupvar)){
df$id=1:nrow(df)
df$tooltip=paste0(df$variable,"=",round(df$value,1))
p<-ggplot(data=df,aes_string(x="variable",y="value",group=1,tooltip="tooltip",data_id="id"))+
geom_point_interactive(size=3,colour=colour)+
geom_polygon(colour=colour,fill=colour,alpha=0.4)
} else {
groupvar=as.character(substitute(groupvar))
df=df[!(df$variable %in% groupvar),]
df$id2=df[[groupvar]]
df$id=1:nrow(df)
df$tooltip=paste0(groupvar,"=",df[[groupvar]],"<br>",df$variable,"=",round(df$value,1))
df$tooltip2=paste0(groupvar,"=",df[[groupvar]])
df
for(i in 1:length(groupvar)) df[[groupvar[i]]]=factor(df[[groupvar[i]]])
p<-ggplot(data=df,aes_string(x="variable",y="value",tooltip="tooltip",data_id="id",
colour=groupvar,fill=groupvar,group=groupvar))+
geom_polygon_interactive(aes(tooltip=tooltip2,data_id=id2),alpha=0.4)+
geom_point_interactive(size=3)
}
p<- p+ xlab("")+ylab("")+theme(legend.position=legend.position)
if(radar==TRUE) p<-p+coord_radar()
if(polar==TRUE) p<-p+coord_polar()
if(!is.null(ylim)) p<-p+expand_limits(y=ylim)
if(interactive) p<-ggiraph(code=print(p),hover_css="fill:orange;r:6px;cursor:pointer")
p
}
ggRadar(data=acs)
ggRadar(data=acs,groupvar=sex)
ggRadar(data=acs,groupvar=sex)
ggRadar=function(data=iris,
xvars=NULL,
yvar=NULL,
groupvar=NULL,
rescale=FALSE,
legend.position="bottom",
radar=TRUE,polar=FALSE,
mean=TRUE,nrow=FALSE,
colour="red", ylim=NULL,
interactive=FALSE){
if(!is.null(groupvar)) groupvar=as.character(substitute(groupvar))
if(is.null(xvars)) {
select=sapply(data,is.numeric)
xvars=colnames(data)[select]
}
if(is.null(yvar)){
# if(!is.null(groupvar)) {
#         for(i in 1:length(groupvar)) data[[groupvar[i]]]=factor(data[[groupvar[i]]])
# }
# data
if(rescale) data=rescale_df(data,groupvar)
longdf=melt(data,id.vars=groupvar,measure.vars=xvars)
longdf
if(mean)
df=ddply(longdf,c(groupvar,"variable"),summarize,mean(value,na.rm=TRUE))
if(nrow)
df=ddply(longdf,c(groupvar,"variable"),"nrow")
colnames(df)[length(df)]="value"
#print(df)
} else{
longdf=data
}
if(is.null(groupvar)){
df$id=1:nrow(df)
df$tooltip=paste0(df$variable,"=",round(df$value,1))
p<-ggplot(data=df,aes_string(x="variable",y="value",group=1,tooltip="tooltip",data_id="id"))+
geom_point_interactive(size=3,colour=colour)+
geom_polygon(colour=colour,fill=colour,alpha=0.4)
} else {
df=df[!(df$variable %in% groupvar),]
df$id2=df[[groupvar]]
df$id=1:nrow(df)
df$tooltip=paste0(groupvar,"=",df[[groupvar]],"<br>",df$variable,"=",round(df$value,1))
df$tooltip2=paste0(groupvar,"=",df[[groupvar]])
df
for(i in 1:length(groupvar)) df[[groupvar[i]]]=factor(df[[groupvar[i]]])
p<-ggplot(data=df,aes_string(x="variable",y="value",tooltip="tooltip",data_id="id",
colour=groupvar,fill=groupvar,group=groupvar))+
geom_polygon_interactive(aes(tooltip=tooltip2,data_id=id2),alpha=0.4)+
geom_point_interactive(size=3)
}
p<- p+ xlab("")+ylab("")+theme(legend.position=legend.position)
if(radar==TRUE) p<-p+coord_radar()
if(polar==TRUE) p<-p+coord_polar()
if(!is.null(ylim)) p<-p+expand_limits(y=ylim)
if(interactive) p<-ggiraph(code=print(p),hover_css="fill:orange;r:6px;cursor:pointer")
p
}
ggRadar(data=acs)
ggRadar(data=acs,groupvar=sex)
ggRadar=function(data=iris,
xvars=NULL,
yvar=NULL,
groupvar=NULL,
rescale=FALSE,
legend.position="bottom",
radar=TRUE,polar=FALSE,
mean=TRUE,nrow=FALSE,
colour="red", ylim=NULL,
interactive=FALSE){
if(is.null(xvars)) {
select=sapply(data,is.numeric)
xvars=colnames(data)[select]
}
if(is.null(yvar)){
# if(!is.null(groupvar)) {
#         for(i in 1:length(groupvar)) data[[groupvar[i]]]=factor(data[[groupvar[i]]])
# }
# data
if(rescale) data=rescale_df(data,groupvar)
longdf=melt(data,id.vars=groupvar,measure.vars=xvars)
longdf
if(mean)
df=ddply(longdf,c(groupvar,"variable"),summarize,mean(value,na.rm=TRUE))
if(nrow)
df=ddply(longdf,c(groupvar,"variable"),"nrow")
colnames(df)[length(df)]="value"
#print(df)
} else{
longdf=data
}
if(is.null(groupvar)){
df$id=1:nrow(df)
df$tooltip=paste0(df$variable,"=",round(df$value,1))
p<-ggplot(data=df,aes_string(x="variable",y="value",group=1,tooltip="tooltip",data_id="id"))+
geom_point_interactive(size=3,colour=colour)+
geom_polygon(colour=colour,fill=colour,alpha=0.4)
} else {
df=df[!(df$variable %in% groupvar),]
df$id2=df[[groupvar]]
df$id=1:nrow(df)
df$tooltip=paste0(groupvar,"=",df[[groupvar]],"<br>",df$variable,"=",round(df$value,1))
df$tooltip2=paste0(groupvar,"=",df[[groupvar]])
df
for(i in 1:length(groupvar)) df[[groupvar[i]]]=factor(df[[groupvar[i]]])
p<-ggplot(data=df,aes_string(x="variable",y="value",tooltip="tooltip",data_id="id",
colour=groupvar,fill=groupvar,group=groupvar))+
geom_polygon_interactive(aes(tooltip=tooltip2,data_id=id2),alpha=0.4)+
geom_point_interactive(size=3)
}
p<- p+ xlab("")+ylab("")+theme(legend.position=legend.position)
if(radar==TRUE) p<-p+coord_radar()
if(polar==TRUE) p<-p+coord_polar()
if(!is.null(ylim)) p<-p+expand_limits(y=ylim)
if(interactive) p<-ggiraph(code=print(p),hover_css="fill:orange;r:6px;cursor:pointer")
p
}
# ggRadar(data=acs)
# ggRadar(data=acs,groupvar="sex",interactive=TRUE)
ggRadar(data=acs)
ggRadar(data=acs,groupvar="sex",interactive=TRUE)
