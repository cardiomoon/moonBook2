}
ggHeatmap(acs,"Dx","smoking",addlabel=TRUE)
ggHeatmap(rose,"group","Month","value",stat="identity")
ggHeatmap(taco,"AgeGroup","Filling","Rating",stat="identity",interactive=TRUE)
ggHeatmap(taco,"AgeGroup","Filling","Rating",stat="identity")
ggHeatmap(taco,"AgeGroup","Filling","Rating","Shell",stat="identity")
taco
ggHeatmap(taco,"AgeGroup","Filling","Rating","ShellType",stat="identity")
ggHeatmap=function(data,xvar,yvar,fillvar=NULL,facetvar=NULL,stat="count",gradient_colors=c("white","steelblue"),
addlabel=FALSE,polar=FALSE,interactive=FALSE,yangle=0,color="black",size=0.1,...){
if(stat=="count") {
df=plyr::ddply(data,c(xvar,yvar,facetvar),"nrow")
} else {
df=data[c(xvar,yvar,fillvar,facetvar)]
colnames(df)[3]="nrow"
}
width=1
df$xno=as.numeric(factor(df[[1]]))
df$yno=as.numeric(factor(df[[2]]))
df$xmin=df$xno-width/2
df$xmax=df$xno+width/2
df$ymin=df$yno-width/2
df$ymax=df$yno+width/2
df$tooltip=paste0(df[[xvar]],"<br>",df[[yvar]],"<br>",df$nrow)
df$data_id=1:nrow(df)
df
xlabels=levels(factor(df[[1]]))
ylabels=levels(factor(df[[2]]))
xtotal=length(xlabels)
x=1:xtotal
ytotal=length(ylabels)
y=1:ytotal
ggplot(df,aes(x=Dx,y=smoking,fill=nrow))+geom_tile()
p<-ggplot(df,aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax,fill=nrow))+
geom_rect_interactive(aes(dara_id=data_id,tooltip=tooltip),color=color,size=size,...)+
xlab(xvar)+ylab(yvar)
p<-p+scale_x_continuous(breaks=x,labels=xlabels,limits = c(0.5,xtotal+0.5))
p<-p+scale_y_continuous(breaks=y,labels=ylabels,limits = c(0.5,ytotal+0.5))
if(yangle!=0) p<-p+theme(axis.text.y=element_text(angle=90,hjust = 0.5))
p<- p+scale_fill_gradientn(colours=gradient_colors)
if(addlabel)
p<-p+geom_text(aes(x=xno,y=yno,label=nrow))+guides(fill=FALSE)
if(polar) p<-p+coord_polar()
if(!is.null(facetvar)) {
formula=as.formula(paste0("",facetvar))
p<-p+facet_wrap(formula)
}
if(interactive) p<-ggiraph(code=print(p))
p
}
ggHeatmap(taco,"AgeGroup","Filling","Rating","ShellType",stat="identity")
ggHeatmap=function(data,xvar,yvar,fillvar=NULL,facetvar=NULL,stat="count",gradient_colors=c("white","steelblue"),
addlabel=FALSE,polar=FALSE,interactive=FALSE,yangle=0,color="black",size=0.1,...){
if(stat=="count") {
df=plyr::ddply(data,c(xvar,yvar,facetvar),"nrow")
} else {
df=data[c(xvar,yvar,fillvar,facetvar)]
colnames(df)[3]="nrow"
}
width=1
df$xno=as.numeric(factor(df[[1]]))
df$yno=as.numeric(factor(df[[2]]))
df$xmin=df$xno-width/2
df$xmax=df$xno+width/2
df$ymin=df$yno-width/2
df$ymax=df$yno+width/2
df$tooltip=paste0(df[[xvar]],"<br>",df[[yvar]],"<br>",df$nrow)
df$data_id=1:nrow(df)
df
xlabels=levels(factor(df[[1]]))
ylabels=levels(factor(df[[2]]))
xtotal=length(xlabels)
x=1:xtotal
ytotal=length(ylabels)
y=1:ytotal
ggplot(df,aes(x=Dx,y=smoking,fill=nrow))+geom_tile()
p<-ggplot(df,aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax,fill=nrow))+
geom_rect_interactive(aes(dara_id=data_id,tooltip=tooltip),color=color,size=size,...)+
xlab(xvar)+ylab(yvar)
p<-p+scale_x_continuous(breaks=x,labels=xlabels,limits = c(0.5,xtotal+0.5))
p<-p+scale_y_continuous(breaks=y,labels=ylabels,limits = c(0.5,ytotal+0.5))
if(yangle!=0) p<-p+theme(axis.text.y=element_text(angle=90,hjust = 0.5))
p<- p+scale_fill_gradientn(colours=gradient_colors)
if(addlabel)
p<-p+geom_text(aes(x=xno,y=yno,label=nrow))+guides(fill=FALSE)
if(polar) p<-p+coord_polar()
if(!is.null(facetvar)) {
formula=as.formula(paste0("~",facetvar))
p<-p+facet_wrap(formula)
}
if(interactive) p<-ggiraph(code=print(p))
p
}
ggHeatmap(taco,"AgeGroup","Filling","Rating","ShellType",stat="identity")
ggHeatmap(acs,"Dx","smoking",addlabel=TRUE)
ggHeatmap(rose,"group","Month","value",stat="identity")
ggHeatmap(rose,"group","Month","value",stat="identity")
ggHeatmap(rose,"group","Month","value",stat="identity",addlabel=TRUE)
ggHeatmap(rose,"Month","group","value",stat="identity",polar=TRUE,interactive=TRUE)
ggHeatmap(rose,"group","Month","value",stat="identity",gradient_colors = c("white","red"))
ggHeatmap(rose,"group","Month","value",stat="identity",addlabel=TRUE)
head(taco)
str(taco)
devtools::document()
devtools::install_github("cardiomoon/moonBook2")
warnings()
require(moonBook2)
devtools::document()
library(moonBook2)
library(moonBook2)
ggBar(acs,"Dx","smoking",interactive=TRUE)
ggBar(acs,"Dx","smoking",interactive=TRUE,width=1,colour="white",size=0.2,polar=TRUE)
ggBar(acs,"Dx","smoking",position="fill",addlabel=TRUE,interactive=TRUE)
ggBar(acs,"Dx","smoking",position="dodge",addlabel=TRUE,interactive=TRUE)
ggBar(acs,"Dx","smoking",position="fill",addlabel=TRUE,horizontal=TRUE,width=0.5)
ggBar(acs,"Dx","smoking",position="fill",addlabel=TRUE,horizontal=TRUE,width=0.5,
interactive=TRUE)
library(moonBook2)
ggBar(acs,"Dx","smoking",position="fill",addlabel=TRUE,horizontal=TRUE,yangle=90,
width=0.5,interactive=TRUE)
ggBar(acs,"Dx","smoking",position="fill",addlabel=TRUE,horizontal=TRUE,yangle=90,
width=0.5,interactive=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(moonBook2)
library(moonBook2)
ggBar(acs,"Dx","smoking",position="fill",addlabel=TRUE,interactive=TRUE)
ggBar(acs,"Dx","smoking",position="fill",addlabel=TRUE,horizontal=TRUE,yangle=90,
width=0.5,interactive=TRUE)
library(moonBook2)
ggBar(acs,"Dx","smoking",position="fill",addlabel=TRUE,horizontal=TRUE,yangle=90,
width=0.5,interactive=TRUE)
ggBar(rose,Month,group,"value",stat="identity",polar=TRUE,palette="Reds",width=1,
color="black",size=0.1,interactive=TRUE)
ggBar(rose,Month,group,"value",stat="identity")
ggBar(rose,Month,group,"value",stat="identity",width=1)
ggBar(rose,Month,group,"value",stat="identity")
ggBar(rose,Month,group,"value",stat="identity")
ggBar(rose,Month,group,"value",stat="identity",interative=TRUE)
ggBar(rose,Month,group,"value",stat="identity",interactive=TRUE)
ggRose(rose,Month,group,"value",stat="identity",interactive=TRUE)
ggRose(rose,Month,group,"value",interactive=TRUE)
ggBar(rose,Month,group,"value",stat="identity",polar=TRUE,palette="Reds",width=1,
color="black",size=0.1,interactive=TRUE)
ggRose(acs,"Dx","smoking")
ggHeatmap(acs,"Dx","smoking")
ggHeatmap(acs,"Dx","smoking",addlabel=TRUE)
ggHeatmap(rose,"group","Month","value",stat="identity",addlabel=TRUE)
ggHeatmap(rose,"group","Month","value",stat="identity",interactive=TRUE)
ggHeatmap(taco,x="AgeGroup",y="Filling",filling="Rating",facet="ShellType",
stat="identity",interactive=TRUE)
ggHeatmap(taco,"AgeGroup","Filling","Rating",facetvar="ShellType",
stat="identity",interactive=TRUE)
includeHTML("temp.html")
install.packages("rmarkdown")
library(moonBook2)
library(moonBook2)
devtools::document()
library(moonBook2)
library(moonBook2)
singer
??singer
lattice::singer
ggplot(data=singer,aes(x=voice.part,y=height))+geom_boxplot()
require(ggplot2)
ggplot(data=lattice:singer,aes(x=voice.part,y=height))+geom_boxplot()
lattice::singer
singer<-lattice::singer
ggplot(data=singer,aes(x=voice.part,y=height))+geom_boxplot()
p<-ggplot(data=singer,aes(x=voice.part,y=height))+geom_boxplot()
reqiure(plotly)
ggplotly(p)
require(plotly)
ggplotly(p)
p<-ggplot(data=singer,aes(x=voice.part,y=height,color=voice.part))+geom_boxplot()
ggplotly(p)
ggplotly(p) %>% layout(showlegend=FALSE)
plot_ly(singer,x=height,color=voice.part,type="box")
singer %>%
plot_ly(x=height,color=voice.part,type="box") %>%
layout(showlegend=FALSE)
plot_ly(y=height,color=voice.part,type="box") %>%
layout(showlegend=FALSE)
singer %>%
plot_ly(y=height,color=voice.part,type="box") %>%
layout(showlegend=FALSE)
require(datasets)
Andrew
require(googleVis)
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
useMapTypeControl=TRUE))
plot(AndrewMap)
Andrew
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
datSK <- data.frame(From=c(rep("A",3), rep("B", 3)),
To=c(rep(c("X", "Y", "Z"),2)),
Weight=c(5,7,6,2,9,4))
Sankey <- gvisSankey(datSK, from="From", to="To", weight="Weight",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankey)
datSK <- data.frame(From=c(rep("A",3), rep("B", 3)),
To=c(rep(c("X", "Y", "Z"),2)),
Weight=c(5,7,6,2,9,4))
Sankey <- gvisSankey(datSK, from="From", to="To", weight="Weight",
options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(Sankey)
datSK
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
width=700,height-700,
useMapTypeControl=TRUE))
plot(AndrewMap)
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
width=700,height=700,
useMapTypeControl=TRUE))
plot(AndrewMap)
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
height="100%",
useMapTypeControl=TRUE))
plot(AndrewMap)
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
height=800,
useMapTypeControl=TRUE))
plot(AndrewMap)
Regions
Tree <- gvisTreeMap(Regions,  "Region", "Parent", "Val", "Fac",
options=list(width=600, height=500,
showScale=TRUE, fontSize=16))
plot(Tree)
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
height=800,
useMapTypeControl=TRUE))
m<-AndrewMap
htmlstring <- paste(c(m$html$header,
paste(m$html$chart,collapse = ""),
m$html$caption,m$html$footer),collapse = "\n")
htmlstring
write(htmlstring,"test.html")
str(AndrewMap)
Andrew
jeju=read.csv("jeju.csv")
jeju
jeju=read.csv("jeju.csv")
jeju=read.csv("jeju.csv",fileEncoding = "utf-8")
jeju=read.csv("jeju.csv",fileEncoding = "utf-8")
jeju=read.csv("jeju.csv",fileEncoding = "euc-kr")
jeju
jeju$LONLAT=paste0(jeju$LAT,":",jeju$LON)
jeju=read.csv("jeju.csv",fileEncoding = "euc-kr")
jeju$LatLong=paste0(jeju$LAT,":",jeju$LON)
jeju
jejuMap <- gvisMap(jeju, "LatLong" , "장소",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
height=800,
useMapTypeControl=TRUE))
jejuMap
plot(jejuMap)
jejuMap <- gvisMap(jeju, "LatLong" , "장소",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
useMapTypeControl=TRUE))
plot(jejuMap)
saveHTML=function(x,filename){
m<-x
htmlstring <- paste(c(m$html$header,
paste(m$html$chart,collapse = ""),
m$html$caption,m$html$footer),collapse = "\n")
write(htmlstring,filename)
}
jejuMap <- gvisMap(jeju, "LatLong" , "장소",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
height=800,
mapType='terrain',
useMapTypeControl=TRUE))
plot(jejuMap)
plot(jejuMap)
saveHTML(jejuMap,"jejumap.html")
data(Andrew)
M1 <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE,
mapType='hybrid', useMapTypeControl=TRUE,
width=800,height=400))
plot(M1)
df <- data.frame(Postcode=c("EC3M 7HA", "EC2P 2EJ"),
Tip=c("<a href='http://www.lloyds.com'>Lloyd's</a>",
"<a href='http://www.guildhall.cityoflondon.gov.uk/'>Guildhall</a>"))
M2 <- gvisMap(df, "Postcode", "Tip",
options=list(showTip=TRUE, mapType='normal',
enableScrollWheel=TRUE))
plot(M2)
M3 <- gvisMap(df, "Postcode", "Tip",
options=list(showTip=TRUE, mapType='normal',
enableScrollWheel=TRUE,
icons=paste0("{",
"'default': {'normal': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Azure-icon.png',\n",
"'selected': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Right-Azure-icon.png'",
"}}")))
plot(M3)
datSK <- data.frame(From=c(rep("A",3), rep("B", 3)),
To=c(rep(c("X", "Y", "Z"),2)),
Weight=c(5,7,6,2,9,4))
datSK
dat <- data.frame(From=c(rep("A",3), rep("B", 3)),
To=c(rep(c("X", "Y", "Z"),2)),
Weight=c(5,7,6,2,9,4))
dat
sk1 <- gvisSankey(dat, from="From", to="To", weight="Weight")
plot(sk1)
sk2 <- gvisSankey(dat, from="From", to="To", weight="Weight",
options=list(sankey="{link: {color: { fill: '#d799ae' } },
node: { color: { fill: '#a61d4c' },
label: { color: '#871b47' } }}"))
plot(sk2)
plot(sk1)
datTL <- data.frame(Position=c(rep("President", 3), rep("Vice", 3)),
Name=c("Washington", "Adams", "Jefferson",
"Adams", "Jefferson", "Burr"),
start=as.Date(x=rep(c("1789-03-29", "1797-02-03",
"1801-02-03"),2)),
end=as.Date(x=rep(c("1797-02-03", "1801-02-03",
"1809-02-03"),2)))
Timeline <- gvisTimeline(data=datTL,
rowlabel="Name",
barlabel="Position",
start="start",
end="end",
options=list(timeline="{groupByRowLabel:false}",
backgroundColor='#ffd',
height=350,
colors="['#cbb69d', '#603913', '#c69c6e']"))
plot(Timeline)
datTL
dat <- data.frame(Term=c("1","2","3"),
President=c("Whasington", "Adams", "Jefferson"),
start=as.Date(x=c("1789-03-29", "1797-02-03", "1801-02-03")),
end=as.Date(x=c("1797-02-03", "1801-02-03", "1809-02-03")))
dat
tl <- gvisTimeline(data=dat[,-1], rowlabel="President",
start="start", end="end")
plot(tl)
tl <- gvisTimeline(data=dat, barlabel="President",
start="start", end="end")
plot(tl)
dat
tl <- gvisTimeline(data=dat[,-1], rowlabel="President",
start="start", end="end")
plot(tl)
tl <- gvisTimeline(data=dat, rowlabel="President",
start="start", end="end",
options=list(timeline="{showRowLabels:false}"))
plot(tl)
dat <- data.frame(Position=c(rep("President", 3), rep("Vice", 3)),
Name=c("Washington", "Adams", "Jefferson",
"Adams", "Jefferson", "Burr"),
start=as.Date(x=rep(c("1789-03-29", "1797-02-03", "1801-02-03"),2)),
end=as.Date(x=rep(c("1797-02-03", "1801-02-03", "1809-02-03"),2)))
dat
tl <- gvisTimeline(data=dat, rowlabel="Name",barlabel="Position",
start="start", end="end",
options=list(timeline="{showRowLabels:true}"))
plot(tl)
tl <- gvisTimeline(data=dat, rowlabel="Name",barlabel="Position",
start="start", end="end",
options=list(timeline="{groupByRowLabel:false}",
backgroundColor='#ffd', height=350,
colors="['#cbb69d', '#603913', '#c69c6e']"))
plot(tl)
dat <- data.frame(Room=c("Room 1","Room 2","Room 3"),
Language=c("English", "German", "French"),
start=as.POSIXct(c("2014-03-14 14:00", "2014-03-14 15:00",
"2014-03-14 14:30")),
end=as.POSIXct(c("2014-03-14 15:00", "2014-03-14 16:00",
"2014-03-14 15:30")))
tl <- gvisTimeline(data=dat, rowlabel="Language",
start="start", end="end")
plot(tl)
require(timeline)
data(ww2)
timeline(ww2, ww2.events, event.spots=2, event.label='', event.above=FALSE)
ww2$Person <- gsub("\\n" ," ", ww2$Person)
plot(gvisTimeline(ww2, barlabel="Person", rowlabel="Group",
start="StartDate", end="EndDate",
options=list(width=600, height=350))
)
require(timeline)
install.packages("timeline")
require(timeline)
data(ww2)
ww2
timeline(ww2, ww2.events, event.spots=2, event.label='', event.above=FALSE)
ww2$Person <- gsub("\\n" ," ", ww2$Person)
plot(gvisTimeline(ww2, barlabel="Person", rowlabel="Group",
start="StartDate", end="EndDate",
options=list(width=600, height=350))
)
Regions
Org <- gvisOrgChart(Regions,
options=list(width=600, height=250,
size='large', allowCollapse=TRUE))
plot(Org)
Org <- gvisOrgChart(Regions,
options=list(width=600, height=250,
size='large', allowCollapse=TRUE))
plot(Org)
Anno <- gvisAnnotationChart(Stock,
datevar="Date",
numvar="Value",
idvar="Device",
titlevar="Title",
annotationvar="Annotation",
options=list(
width=600, height=350,
fill=10, displayExactValues=TRUE,
colors="['#0000ff','#00ff00']")
)
plot(Anno)
Stock
CityPopularity
Gauge <-  gvisGauge(CityPopularity,
options=list(min=0, max=800, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
plot(Gauge)
Motion=gvisMotionChart(Fruits,
idvar="Fruit",
timevar="Year")
plot(Motion)
Friuts
Fruits
library(moonBook2)
ggPoints(data=iris,xvar=Sepal.Length,yvar=Sepal.Width,color="Species",interactive=TRUE)
ggPoints(iris,xvar=Sepal.Length,yvar=Sepal.Width,color="Species",interactive=TRUE)
ggPoints(iris,xvar=Sepal.Length,yvar=Sepal.Width,colour="Species",interactive=TRUE)
ggPoints(mtcars,y=mpg,x=wt,fill="factor(cyl)",pch=21,smooth=FALSE)
ggPoints(mtcars,y=mpg,x=wt,fill="factor(cyl)",pch=21,smooth=FALSE)
ggPoints(mtcars,yvar=mpg,xvar=wt,fill="factor(cyl)",pch=21,smooth=FALSE)
ggPoints(acs,xvar=height,yvar=weight,colour="sex",interactive=TRUE,
position="jitter",method="lm",formula=y~poly(x,2))
require(moonBook)
ggPoints(acs,xvar=height,yvar=weight,colour="sex",interactive=TRUE,
position="jitter",method="lm",formula=y~poly(x,2))
library(moonBook2)
ggRose=function(data,xvar,fillvar,...,palette="Reds",color="black",size=0.1){
data=as.character(substitute(data))
fillvar=as.character(substitute(fillvar))
xvar=as.character(substitute(xvar))
temp=paste0("ggBar(data=",data,",xvar=",xvar,",fillvar=",fillvar,",stat='identity',width=1,color='",color,
"',size=",size,",palette='",palette,"',polar=TRUE,...)")
print(temp)
p<-eval(parse(text=temp))
p
}
ggRose(rose,x='Month',fill='group',y='value',addlabel=TRUE,interactive=TRUE)
library(moonBook2)
ggRose(rose,x='Month',fill='group',y='value',addlabel=TRUE,interactive=TRUE)
ggBar(data=rose,xvar=Month,fillvar=group,stat='identity',width=1,color='black',size=0.1,palette='Reds',polar=TRUE)
require(ggiraph)
ggBar(data=rose,xvar=Month,fillvar=group,stat='identity',width=1,color='black',size=0.1,palette='Reds',polar=TRUE)
ggRose(rose,Month,group,"value",interactive=TRUE)
ggRose(rose,Month,group,"value")
library(moonBook2)
library(moonBook2)
